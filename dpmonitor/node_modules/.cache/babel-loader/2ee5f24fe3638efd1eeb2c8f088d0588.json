{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Project/2021SpringTeam04-LAS1/dpmonitor/src/components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Grid.css';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Grid({\n  script\n}) {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const [rowData, setRowData] = useState(null);\n  const [fields, setFields] = useState([]);\n  useEffect(() => {\n    // Keeps track of whether or not component is mounted\n    let isMounted = true;\n\n    if (script) {\n      fetch(`https://jsonplaceholder.typicode.com/${script.id}`).then(response => response.json()).then(json => {\n        // Only set component state if it is mounted\n        // Set fields array to keys of the json data\n        if (isMounted) {\n          setRowData(json);\n          setFields(Object.keys(json[0]));\n        }\n      });\n      return () => {\n        isMounted = false;\n      };\n    }\n  }); // Dynamically generated columns from the fields array\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-grid ag-theme-alpine\",\n    children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n      rowData: rowData,\n      children: fields.map((item, i) => {\n        return /*#__PURE__*/_jsxDEV(AgGridColumn, {\n          field: fields[i]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"TUYLqNqU/anhH+oUX7S2WlR27uw=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/mac/Project/2021SpringTeam04-LAS1/dpmonitor/src/components/Grid.js"],"names":["React","useState","useEffect","AgGridColumn","AgGridReact","Grid","script","gridApi","setGridApi","gridColumnApi","setGridColumnApi","rowData","setRowData","fields","setFields","isMounted","fetch","id","then","response","json","Object","keys","map","item","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,YAAP;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,eAA1C;AAEA,OAAO,2CAAP;AACA,OAAO,mDAAP;;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAA0B;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAIa,SAAS,GAAG,IAAhB;;AACA,QAAIT,MAAJ,EAAY;AACRU,MAAAA,KAAK,CAAE,wCAAuCV,MAAM,CAACW,EAAG,EAAnD,CAAL,CACKC,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EAEKF,IAFL,CAEWE,IAAD,IAAU;AACZ;AACA;AACA,YAAIL,SAAJ,EAAe;AACXH,UAAAA,UAAU,CAACQ,IAAD,CAAV;AACAN,UAAAA,SAAS,CAACO,MAAM,CAACC,IAAP,CAAYF,IAAI,CAAC,CAAD,CAAhB,CAAD,CAAT;AACH;AACJ,OATL;AAUA,aAAO,MAAM;AACTL,QAAAA,SAAS,GAAG,KAAZ;AACH,OAFD;AAGH;AACJ,GAlBQ,CAAT,CANsB,CA0BtB;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA,2BACI,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEJ,OAAtB;AAAA,gBACKE,MAAM,CAACU,GAAP,CAAW,CAACC,IAAD,EAAOC,CAAP,KAAa;AACrB,4BAAO,QAAC,YAAD;AAAc,UAAA,KAAK,EAAEZ,MAAM,CAACY,CAAD;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GApCQpB,I;;KAAAA,I;AAsCT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Grid.css';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nfunction Grid({ script }) {\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n    const [rowData, setRowData] = useState(null);\n    const [fields, setFields] = useState([]);\n\n    useEffect(() => {\n        // Keeps track of whether or not component is mounted\n        let isMounted = true;\n        if (script) {\n            fetch(`https://jsonplaceholder.typicode.com/${script.id}`)\n                .then((response) => response.json())\n                .then((json) => {\n                    // Only set component state if it is mounted\n                    // Set fields array to keys of the json data\n                    if (isMounted) {\n                        setRowData(json);\n                        setFields(Object.keys(json[0]));\n                    }\n                });\n            return () => {\n                isMounted = false;\n            };\n        }\n    });\n\n    // Dynamically generated columns from the fields array\n    return (\n        <div className='data-grid ag-theme-alpine'>\n            <AgGridReact rowData={rowData}>\n                {fields.map((item, i) => {\n                    return <AgGridColumn field={fields[i]}></AgGridColumn>;\n                })}\n            </AgGridReact>\n        </div>\n    );\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}