{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Project/2021SpringTeam04-LAS1/dpmonitor/src/components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Grid.css';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Grid() {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const [rowData, setRowData] = useState(null);\n  useEffect(() => {\n    // Keeps track of whether or not component is mounted\n    let isMounted = true;\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(json => {\n      // Only set component state if it is mounted\n      if (isMounted) {\n        setRowData(json);\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }); // Create array of column names from json\n  // and generate the AgGridColumns\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-grid ag-theme-alpine\",\n    children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n      rowData: rowData,\n      children: [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"website\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"id\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"SoHjWUMVjQR6oDUHJWOL5RLmsxg=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/mac/Project/2021SpringTeam04-LAS1/dpmonitor/src/components/Grid.js"],"names":["React","useState","useEffect","AgGridColumn","AgGridReact","Grid","gridApi","setGridApi","gridColumnApi","setGridColumnApi","rowData","setRowData","isMounted","fetch","then","response","json"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,YAAP;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,eAA1C;AAEA,OAAO,2CAAP;AACA,OAAO,mDAAP;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACZ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAIU,SAAS,GAAG,IAAhB;AACAC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACKC,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EAEKF,IAFL,CAEWE,IAAD,IAAU;AACZ;AACA,UAAIJ,SAAJ,EAAe;AACXD,QAAAA,UAAU,CAACK,IAAD,CAAV;AACH;AACJ,KAPL;AAQA,WAAO,MAAM;AACTJ,MAAAA,SAAS,GAAG,KAAZ;AACH,KAFD;AAGH,GAdQ,CAAT,CALY,CAqBZ;AACA;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA,2BACI,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEF,OAAtB;AAAA,8BACI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII,QAAC,YAAD;AAAc,QAAA,KAAK,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI,QAAC,YAAD;AAAc,QAAA,KAAK,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAlCQL,I;;KAAAA,I;AAoCT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Grid.css';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nfunction Grid() {\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n    const [rowData, setRowData] = useState(null);\n\n    useEffect(() => {\n        // Keeps track of whether or not component is mounted\n        let isMounted = true;\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then((response) => response.json())\n            .then((json) => {\n                // Only set component state if it is mounted\n                if (isMounted) {\n                    setRowData(json);\n                }\n            });\n        return () => {\n            isMounted = false;\n        };\n    });\n\n    // Create array of column names from json\n    // and generate the AgGridColumns\n    return (\n        <div className='data-grid ag-theme-alpine'>\n            <AgGridReact rowData={rowData}>\n                <AgGridColumn field='name'></AgGridColumn>\n                <AgGridColumn field='username'></AgGridColumn>\n                <AgGridColumn field='email'></AgGridColumn>\n                <AgGridColumn field='website'></AgGridColumn>\n                <AgGridColumn field='id'></AgGridColumn>\n            </AgGridReact>\n        </div>\n    );\n}\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}