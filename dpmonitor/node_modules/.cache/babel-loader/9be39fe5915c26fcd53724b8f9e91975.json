{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Project/2021SpringTeam04-LAS1/dpmonitor/src/components/Scripts.js\";\nimport React, { Component } from 'react';\nimport Editor from './Editor';\nimport ScriptList from './ScriptList';\nimport './Scripts.css';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Scripts extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClose = () => this.setState({\n      showModal: false\n    });\n\n    this.handleShow = () => this.setState({\n      showModal: true\n    });\n\n    this.state = {\n      // Will need a GET request here to fetch script list\n      // Temporarily using scripts array\n      scripts: [{\n        name: 'Script 1',\n        value: 'example value 1'\n      }, {\n        name: 'Script 2',\n        value: 'example value 2'\n      }, {\n        name: 'Script 3',\n        value: 'example value 3'\n      }, {\n        name: 'Script 4',\n        value: 'example value 4'\n      }, {\n        name: 'Script 5',\n        value: 'example value 5'\n      }, {\n        name: 'Script 6',\n        value: 'example value 6'\n      }],\n      selectedScriptIndex: 0,\n      showModal: false,\n      formValue: ''\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.renderEditor = this.renderEditor.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n    this.generateURL = this.generateURL.bind(this);\n  }\n\n  handleClick(e) {\n    let nodes = Array.prototype.slice.call(e.currentTarget.children);\n    let index = nodes.indexOf(e.target);\n    this.setState({\n      selectedScriptIndex: index\n    });\n  }\n\n  renderEditor(selectedScript) {\n    return /*#__PURE__*/_jsxDEV(Editor, {\n      className: \"editor\",\n      editorValue: selectedScript.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 16\n    }, this);\n  } // Runs after user submits form for creating new script and entering\n  // script name.\n  // Here we should call the create script api endpoint to send\n  // script name and get the new script id\n\n\n  generateURL(e) {\n    let newScript = {\n      id: Math.floor(Math.random() * Math.floor(50)),\n      name: this.state.formValue,\n      value: 'NEW SCRIPT'\n    };\n    const newScriptList = this.state.scripts.concat(newScript);\n    this.setState({\n      selectedScriptIndex: this.state.scripts.length\n    });\n    this.setState({\n      scripts: newScriptList\n    });\n    this.setState({\n      formValue: ''\n    });\n    this.handleClose();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scripts-page-container\",\n      children: [this.renderEditor(this.state.scripts[this.state.selectedScriptIndex]), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-and-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(ScriptList, {\n          className: \"script-list\",\n          onScriptSelect: this.handleClick,\n          scriptList: this.state.scripts,\n          activeIndex: this.state.selectedScriptIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"script-list-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            className: \"create-button\",\n            variant: \"outline-primary\",\n            onClick: this.handleShow,\n            children: \"Create New Script\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"rename-button\",\n            variant: \"outline-primary\",\n            children: \"Rename\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: this.state.showModal,\n        onHide: this.handleClose,\n        animation: true,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Create New Script\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"newScriptName\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Script Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                placeholder: \"Enter new script name\",\n                onChange: e => this.setState({\n                  formValue: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: this.handleClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"primary\",\n            onClick: this.generateURL,\n            children: \"Generate Custom POST URL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Scripts;","map":{"version":3,"sources":["/Users/mac/Project/2021SpringTeam04-LAS1/dpmonitor/src/components/Scripts.js"],"names":["React","Component","Editor","ScriptList","Button","Modal","Form","Scripts","constructor","props","handleClose","setState","showModal","handleShow","state","scripts","name","value","selectedScriptIndex","formValue","handleClick","bind","renderEditor","generateURL","e","nodes","Array","prototype","slice","call","currentTarget","children","index","indexOf","target","selectedScript","newScript","id","Math","floor","random","newScriptList","concat","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Editor from './Editor';\nimport ScriptList from './ScriptList';\nimport './Scripts.css';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\n\nclass Scripts extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // Will need a GET request here to fetch script list\n            // Temporarily using scripts array\n            scripts: [\n                {\n                    name: 'Script 1',\n                    value: 'example value 1',\n                },\n                {\n                    name: 'Script 2',\n                    value: 'example value 2',\n                },\n                {\n                    name: 'Script 3',\n                    value: 'example value 3',\n                },\n                {\n                    name: 'Script 4',\n                    value: 'example value 4',\n                },\n                {\n                    name: 'Script 5',\n                    value: 'example value 5',\n                },\n                {\n                    name: 'Script 6',\n                    value: 'example value 6',\n                },\n            ],\n            selectedScriptIndex: 0,\n            showModal: false,\n            formValue: '',\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.renderEditor = this.renderEditor.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleShow = this.handleShow.bind(this);\n        this.generateURL = this.generateURL.bind(this);\n    }\n\n    handleClose = () => this.setState({ showModal: false });\n    handleShow = () => this.setState({ showModal: true });\n\n    handleClick(e) {\n        let nodes = Array.prototype.slice.call(e.currentTarget.children);\n        let index = nodes.indexOf(e.target);\n        this.setState({ selectedScriptIndex: index });\n    }\n\n    renderEditor(selectedScript) {\n        return <Editor className='editor' editorValue={selectedScript.value} />;\n    }\n\n    // Runs after user submits form for creating new script and entering\n    // script name.\n    // Here we should call the create script api endpoint to send\n    // script name and get the new script id\n    generateURL(e) {\n        let newScript = {\n            id: Math.floor(Math.random() * Math.floor(50)),\n            name: this.state.formValue,\n            value: 'NEW SCRIPT',\n        };\n        const newScriptList = this.state.scripts.concat(newScript);\n        this.setState({ selectedScriptIndex: this.state.scripts.length });\n        this.setState({ scripts: newScriptList });\n        this.setState({ formValue: '' });\n        this.handleClose();\n    }\n\n    render() {\n        return (\n            <div className='scripts-page-container'>\n                {this.renderEditor(\n                    this.state.scripts[this.state.selectedScriptIndex]\n                )}\n                <div className='list-and-buttons'>\n                    <ScriptList\n                        className='script-list'\n                        onScriptSelect={this.handleClick}\n                        scriptList={this.state.scripts}\n                        activeIndex={this.state.selectedScriptIndex}\n                    />\n                    <div className='script-list-buttons'>\n                        <Button\n                            className='create-button'\n                            variant='outline-primary'\n                            onClick={this.handleShow}\n                        >\n                            Create New Script\n                        </Button>\n                        <Button\n                            className='rename-button'\n                            variant='outline-primary'\n                        >\n                            Rename\n                        </Button>\n                    </div>\n                </div>\n\n                <Modal\n                    show={this.state.showModal}\n                    onHide={this.handleClose}\n                    animation={true}\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title>Create New Script</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form>\n                            <Form.Group controlId='newScriptName'>\n                                <Form.Label>Script Name</Form.Label>\n                                <Form.Control\n                                    type='text'\n                                    placeholder='Enter new script name'\n                                    onChange={(e) =>\n                                        this.setState({\n                                            formValue: e.target.value,\n                                        })\n                                    }\n                                />\n                            </Form.Group>\n                        </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant='secondary' onClick={this.handleClose}>\n                            Close\n                        </Button>\n                        <Button\n                            type='submit'\n                            variant='primary'\n                            onClick={this.generateURL}\n                        >\n                            Generate Custom POST URL\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default Scripts;\n"]},"metadata":{},"sourceType":"module"}